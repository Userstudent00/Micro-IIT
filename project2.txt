<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Tic-Tac-Toe</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      text-align: center;
      background-color: #f9f9f9;
      margin: 0;
      padding: 0;
    }

    h1 {
      margin-top: 20px;
    }

    .board {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      grid-gap: 5px;
      justify-content: center;
      margin: 20px auto;
    }

    .cell {
      width: 100px;
      height: 100px;
      background-color: #fff;
      border: 2px solid #ddd;
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 24px;
      cursor: pointer;
    }

    .cell.taken {
      pointer-events: none;
      color: #666;
    }

    .scoreboard {
      display: flex;
      justify-content: center;
      gap: 20px;
    }

    button {
      margin-top: 20px;
      padding: 10px 20px;
      font-size: 16px;
      cursor: pointer;
      background-color: #4caf50;
      color: white;
      border: none;
      border-radius: 5px;
    }

    button:hover {
      background-color: #45a049;
    }
  </style>
</head>
<body>
  <h1>Tic-Tac-Toe</h1>
  <div class="scoreboard">
    <p>Player X: <span id="scoreX">0</span></p>
    <p>Player O: <span id="scoreO">0</span></p>
  </div>
  <div class="board" id="board"></div>
  <button id="restart">Restart Game</button>
  <script>
    const board = document.getElementById('board');
    const restartButton = document.getElementById('restart');
    const scoreX = document.getElementById('scoreX');
    const scoreO = document.getElementById('scoreO');

    let currentPlayer = 'X';
    let gameActive = true;
    let scores = { X: 0, O: 0 };

    // Initialize the game board
    function initializeBoard() {
      board.innerHTML = '';
      for (let i = 0; i < 9; i++) {
        const cell = document.createElement('div');
        cell.classList.add('cell');
        cell.dataset.index = i;
        cell.addEventListener('click', handleCellClick);
        board.appendChild(cell);
      }
    }

    // Handle cell clicks
    function handleCellClick(e) {
      const cell = e.target;
      if (!gameActive || cell.classList.contains('taken')) return;

      cell.textContent = currentPlayer;
      cell.classList.add('taken');

      if (checkWinner()) {
        updateScore();
        alert(Player ${currentPlayer} wins!);
        gameActive = false;
      } else if (isDraw()) {
        alert('It\'s a draw!');
        gameActive = false;
      } else {
        currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
      }
    }

    // Check for a winner
    function checkWinner() {
      const cells = Array.from(document.querySelectorAll('.cell')).map(cell => cell.textContent);
      const winningCombinations = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],
        [0, 3, 6], [1, 4, 7], [2, 5, 8],
        [0, 4, 8], [2, 4, 6]
      ];

      return winningCombinations.some(combination => {
        return combination.every(index => cells[index] === currentPlayer);
      });
    }

    // Check for a draw
    function isDraw() {
      return [...document.querySelectorAll('.cell')].every(cell => cell.classList.contains('taken'));
    }

    // Update scoreboard
    function updateScore() {
      scores[currentPlayer]++;
      scoreX.textContent = scores.X;
      scoreO.textContent = scores.O;
    }

    // Restart the game
    restartButton.addEventListener('click', () => {
      gameActive = true;
      currentPlayer = 'X';
      initializeBoard();
    });

    // Start the game
    initializeBoard();
  </script>
</body>
</html>
